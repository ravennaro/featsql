[
  {
    "objectID": "creation_sqlite.html",
    "href": "creation_sqlite.html",
    "title": "Creation sqlite",
    "section": "",
    "text": "source\n\n\n\n sqlite_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                          tb_feat, safra, status)\n\n\nsource\n\n\n\n\n sqlite_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n sqlite_create_query_num (tb_publico, tb_feat, list_window,\n                          feat_num_lista, id, safra_ref, safra,\n                          file_name=None, status=False, table_name=None,\n                          conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation sqlite"
    ]
  },
  {
    "objectID": "creation_sqlite.html#variáveis-numéricas",
    "href": "creation_sqlite.html#variáveis-numéricas",
    "title": "Creation sqlite",
    "section": "",
    "text": "source\n\n\n\n sqlite_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                          tb_feat, safra, status)\n\n\nsource\n\n\n\n\n sqlite_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n sqlite_create_query_num (tb_publico, tb_feat, list_window,\n                          feat_num_lista, id, safra_ref, safra,\n                          file_name=None, status=False, table_name=None,\n                          conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation sqlite"
    ]
  },
  {
    "objectID": "creation_sqlite.html#variáveis-categóricas",
    "href": "creation_sqlite.html#variáveis-categóricas",
    "title": "Creation sqlite",
    "section": "Variáveis categóricas",
    "text": "Variáveis categóricas\n\nsource\n\nsqlite_query_janela_cat\n\n sqlite_query_janela_cat (list_window, feat_cat_lista, id, safra_ref,\n                          tb_feat, safra, status)\n\n\nsource\n\n\nsqlite_create_query_cat\n\n sqlite_create_query_cat (tb_publico, tb_feat, list_window,\n                          feat_cat_lista, id, safra_ref, safra,\n                          file_name=None, status=False, table_name=None,\n                          conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_cat_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation sqlite"
    ]
  },
  {
    "objectID": "creation_sqlite.html#variáveis-agregadas",
    "href": "creation_sqlite.html#variáveis-agregadas",
    "title": "Creation sqlite",
    "section": "Variáveis agregadas",
    "text": "Variáveis agregadas\n\nsource\n\nsqlite_query_agregada\n\n sqlite_query_agregada (list_window, lista_feat_num, feat_cat,\n                        list_aggregator_value, id, safra_ref, tb_feat,\n                        safra, status)\n\n\nsource\n\n\nsqlite_query_join_agregada\n\n sqlite_query_join_agregada (janelas, feat_cat, list_aggregator_value, id,\n                             safra_ref)\n\n\nsource\n\n\nsqlite_create_query_agregada\n\n sqlite_create_query_agregada (tb_publico, tb_feat, list_window,\n                               lista_feat_num, id, safra_ref, safra,\n                               feat_cat, list_aggregator_value,\n                               file_name=None, status=False,\n                               table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nlista_feat_num\n\n\nlist of numerical columns\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfeat_cat\n\n\ncategorical column that will be aggregated\n\n\nlist_aggregator_value\n\n\nlist of feat_cat values that will be aggregated into features\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation sqlite"
    ]
  },
  {
    "objectID": "creation_mysql.html",
    "href": "creation_mysql.html",
    "title": "Creation MySQL",
    "section": "",
    "text": "source\n\n\n\n mysql_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                         tb_feat, safra)\n\n\nsource\n\n\n\n\n mysql_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n mysql_create_query_num (tb_publico, tb_feat, list_window, feat_num_lista,\n                         id, safra_ref, safra, file_name=None,\n                         status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation MySQL"
    ]
  },
  {
    "objectID": "creation_mysql.html#variáveis-numéricas",
    "href": "creation_mysql.html#variáveis-numéricas",
    "title": "Creation MySQL",
    "section": "",
    "text": "source\n\n\n\n mysql_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                         tb_feat, safra)\n\n\nsource\n\n\n\n\n mysql_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n mysql_create_query_num (tb_publico, tb_feat, list_window, feat_num_lista,\n                         id, safra_ref, safra, file_name=None,\n                         status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation MySQL"
    ]
  },
  {
    "objectID": "creation_mysql.html#variáveis-categóricas",
    "href": "creation_mysql.html#variáveis-categóricas",
    "title": "Creation MySQL",
    "section": "Variáveis categóricas",
    "text": "Variáveis categóricas\n\nsource\n\nmysql_query_janela_cat\n\n mysql_query_janela_cat (list_window, feat_cat_lista, id, safra_ref,\n                         tb_feat, safra)\n\n\nsource\n\n\nmysql_create_query_cat\n\n mysql_create_query_cat (tb_publico, tb_feat, list_window, feat_cat_lista,\n                         id, safra_ref, safra, file_name=None,\n                         status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_cat_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation MySQL"
    ]
  },
  {
    "objectID": "creation_mysql.html#variáveis-agregadas",
    "href": "creation_mysql.html#variáveis-agregadas",
    "title": "Creation MySQL",
    "section": "Variáveis agregadas",
    "text": "Variáveis agregadas\n\nsource\n\nmysql_query_agregada\n\n mysql_query_agregada (janela, lista_feat_num, feat_cat, feat_cat_valor,\n                       id, safra_ref, tb_feat, safra)\n\n\nsource\n\n\nmysql_query_join_agregada\n\n mysql_query_join_agregada (janelas, feat_cat, list_aggregator_value, id,\n                            safra_ref)\n\n\nsource\n\n\nmysql_create_query_agregada\n\n mysql_create_query_agregada (tb_publico, tb_feat, list_window,\n                              lista_feat_num, id, safra_ref, safra,\n                              feat_cat, list_aggregator_value,\n                              file_name=None, status=False,\n                              table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nlista_feat_num\n\n\nlist of numerical columns\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfeat_cat\n\n\ncategorical column that will be aggregated\n\n\nlist_aggregator_value\n\n\nlist of feat_cat values that will be aggregated into features\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation MySQL"
    ]
  },
  {
    "objectID": "creation_snowflake.html",
    "href": "creation_snowflake.html",
    "title": "Creation Snowflake",
    "section": "",
    "text": "source\n\n\n\n snow_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                        tb_feat, safra)\n\n\nsource\n\n\n\n\n snow_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n snow_create_query_num (tb_publico, tb_feat, list_window, feat_num_lista,\n                        id, safra_ref, safra, file_name=None,\n                        status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation Snowflake"
    ]
  },
  {
    "objectID": "creation_snowflake.html#variáveis-numéricas",
    "href": "creation_snowflake.html#variáveis-numéricas",
    "title": "Creation Snowflake",
    "section": "",
    "text": "source\n\n\n\n snow_query_janela_num (list_window, feat_num_lista, id, safra_ref,\n                        tb_feat, safra)\n\n\nsource\n\n\n\n\n snow_query_join_num (list_window, id, safra_ref)\n\n\nsource\n\n\n\n\n snow_create_query_num (tb_publico, tb_feat, list_window, feat_num_lista,\n                        id, safra_ref, safra, file_name=None,\n                        status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_num_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation Snowflake"
    ]
  },
  {
    "objectID": "creation_snowflake.html#variáveis-categóricas",
    "href": "creation_snowflake.html#variáveis-categóricas",
    "title": "Creation Snowflake",
    "section": "Variáveis categóricas",
    "text": "Variáveis categóricas\n\nsource\n\nsnow_query_janela_cat\n\n snow_query_janela_cat (list_window, feat_cat_lista, id, safra_ref,\n                        tb_feat, safra)\n\n\nsource\n\n\nsnow_create_query_cat\n\n snow_create_query_cat (tb_publico, tb_feat, list_window, feat_cat_lista,\n                        id, safra_ref, safra, file_name=None,\n                        status=False, table_name=None, conn=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntb_publico\n\n\npublic table: contains the public, target and reference date\n\n\ntb_feat\n\n\nfeature table: table with columns that will be transformed into features\n\n\nlist_window\n\n\ntime window list\n\n\nfeat_cat_lista\n\n\nlist of columns that will be transform into features\n\n\nid\n\n\nid column name\n\n\nsafra_ref\n\n\nreference date column name on public table\n\n\nsafra\n\n\ndate column name on feature table\n\n\nfile_name\nNoneType\nNone\nname of the .sql file where the query is saved\n\n\nstatus\nbool\nFalse\nif True, it creates a table on database\n\n\ntable_name\nNoneType\nNone\ntable name created\n\n\nconn\nNoneType\nNone\nDatabase connection",
    "crumbs": [
      "Creation Snowflake"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "featsql",
    "section": "",
    "text": "(EN) There are three kinds of functions that can be used to create features from numerical, categorical and aggregated data. They are:\nNext, we have a detailed example for creating variables in SQLite and MySQL databases, along with an example output for the Snowflake database.\n(PT) Existem três tipos de funções que podem ser usadas para criar variáveis a partir de dados numéricos, categóricos e agregados. São elas: - Para o banco SQLite:\nA seguir, temos um exemplo detalhado para a criação de variáveis no banco sqlite e mysql. Além de um exemplo de output para o banco do tipo snowflake.",
    "crumbs": [
      "featsql"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "featsql",
    "section": "Install",
    "text": "Install\n(EN) To install, simply use the command line:\npip install featsql\n(PT) Para instalar, simplesmente use o comando:\npip install featsql",
    "crumbs": [
      "featsql"
    ]
  },
  {
    "objectID": "index.html#imports",
    "href": "index.html#imports",
    "title": "featsql",
    "section": "Imports",
    "text": "Imports\n\nfrom featsql.featsqlite import *\nfrom featsql.featmysql import *\nfrom featsql.featsnow import *\n\n\nimport pandas as pd\n\n\nimport mysql.connector\nimport sqlite3\npd.set_option('display.max_columns', None)",
    "crumbs": [
      "featsql"
    ]
  },
  {
    "objectID": "index.html#sqlite",
    "href": "index.html#sqlite",
    "title": "featsql",
    "section": "1. SQLITE",
    "text": "1. SQLITE\n\nSetting up the engine (Configurando a engine)\n\nurl_db = \"../../data/mydatabase.db\" \nconn = sqlite3.connect(url_db)\ncursor = conn.cursor()\n\n\n\nInitial view of the public (Visão inicial do público)\n(EN) First, let’s observe the format of the spine table.\n(PT) Primeiro vamos observar o formato da tabela spine\n\ndf_spine = pd.read_sql(\"SELECT * FROM tb_spine\", conn)\ndf_spine.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nTarget\n\n\n\n\n0\n4\n2023-02-01\n0\n\n\n1\n5\n2023-02-01\n0\n\n\n2\n6\n2023-02-01\n0\n\n\n3\n7\n2023-02-01\n0\n\n\n4\n10\n2023-02-01\n1\n\n\n\n\n\n\n\n\n\nInitial view of the variables table (Visão inicial da tabela de variáveis)\n(EN) The table tb_feat contains 4 variables, two numeric and two categorical. Note that there are more unique IDs and dates available in this than in the spine table, as is often the case.\n(PT) A tabela tb_feat contém 4 variáveis, duas sendo numéricas e duas categórica. Perceba que existem mais ID’s únicos e datas disponíveis nessa tabela do que na tabela spine, caso que ocorre no dia a dia.\n\ndf_data = pd.read_sql(\"SELECT * FROM tb_feat\", conn)\ndf_data.head()\n\n\n\n\n\n\n\n\nID\nSAFRA\nFEAT_NUM1\nFEAT_NUM2\nFEAT_CAT1\nFEAT_CAT2\n\n\n\n\n0\n1\n2023-01-01\n-19\n-52\nA\nB\n\n\n1\n2\n2023-01-01\n-7\n-33\nA\nB\n\n\n2\n3\n2023-01-01\n6\n91\nC\nC\n\n\n3\n4\n2023-01-01\n74\n52\nB\nA\n\n\n4\n5\n2023-01-01\n79\n77\nB\nB\n\n\n\n\n\n\n\n\n\nCreation of numerical variables (Criação de variáveis numéricas)\n(EN) The function sqlite_create_query_num() creates a query text for generating variables with the sum, minimum, maximum, and average operations on the variables listed in feat_num_lista and within the time window listed in list_window.\n(PT) A função sqlite_create_query_num() cria um texto com a query para a criação de variáveis com as operações soma, mínimo, máximo e média das variáveis listadas em feat_num_lista e com a janela de tempo listada em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nquery_final_num_sqlite = sqlite_create_query_num(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\n\ndf_num_sqlite = pd.read_sql(query_final_num_sqlite, conn)\ndf_num_sqlite.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_NUM1_SUM_1M\nFEAT_NUM1_MIN_1M\nFEAT_NUM1_MAX_1M\nFEAT_NUM1_AVG_1M\nFEAT_NUM2_SUM_1M\nFEAT_NUM2_MIN_1M\nFEAT_NUM2_MAX_1M\nFEAT_NUM2_AVG_1M\nFEAT_NUM1_SUM_2M\nFEAT_NUM1_MIN_2M\nFEAT_NUM1_MAX_2M\nFEAT_NUM1_AVG_2M\nFEAT_NUM2_SUM_2M\nFEAT_NUM2_MIN_2M\nFEAT_NUM2_MAX_2M\nFEAT_NUM2_AVG_2M\nFEAT_NUM1_SUM_3M\nFEAT_NUM1_MIN_3M\nFEAT_NUM1_MAX_3M\nFEAT_NUM1_AVG_3M\nFEAT_NUM2_SUM_3M\nFEAT_NUM2_MIN_3M\nFEAT_NUM2_MAX_3M\nFEAT_NUM2_AVG_3M\n\n\n\n\n0\n4\n2023-02-01\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n74\n74\n74\n74.0\n52\n52\n52\n52.0\n74\n74\n74\n74.0\n52\n52\n52\n52.0\n\n\n1\n5\n2023-02-01\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n79\n79\n79\n79.0\n77\n77\n77\n77.0\n79\n79\n79\n79.0\n77\n77\n77\n77.0\n\n\n2\n6\n2023-02-01\n-13.0\n-13.0\n-13.0\n-13.0\n-45.0\n-45.0\n-45.0\n-45.0\n-13\n-13\n-13\n-13.0\n-45\n-45\n-45\n-45.0\n-13\n-13\n-13\n-13.0\n-45\n-45\n-45\n-45.0\n\n\n3\n7\n2023-02-01\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n-44\n-44\n-44\n-44.0\n0\n0\n0\n0.0\n-44\n-44\n-44\n-44.0\n0\n0\n0\n0.0\n\n\n4\n10\n2023-02-01\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n11\n11\n11\n11.0\n-39\n-39\n-39\n-39.0\n11\n11\n11\n11.0\n-39\n-39\n-39\n-39.0\n\n\n\n\n\n\n\n(EN) We can use the nome_arquivo parameter with a name in the format ‘table.sql’ to save the creation query in a file in the same folder where it is executed.\n(PT) Podemos utilizar o parâmetro nome_arquivo com um nome no formato “table.sql” para salvar query de criação em um arquivo na mesma pasta que é executado.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nfile_name = 'table.sql'\n\nquery_final_num_sqlite = sqlite_create_query_num(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra, file_name)\n\nComplete query creation with table.sql saved file\n\n\n(EN) Besides saving the query to a file, we can create a table directly in the database using the [sqlite_create_query_num](https://ravennaro.github.io/featsql/creation_sqlite.html#sqlite_create_query_num) function with the creation parameters. Here is an example:\n(PT) Além de salvar a query em um arquivo, podemos criar uma tabela diretamente no banco de dados a partir da função [sqlite_create_query_num](https://ravennaro.github.io/featsql/creation_sqlite.html#sqlite_create_query_num) com os parâmetros de criação. A seguir um exemplo:\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nstatus = True\ntable_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery_final_num_sqlite = sqlite_create_query_num(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra, file_name=file_name, status=status, table_name=table_name, conn=conn)\n\nComplete query creation with table.sql saved file\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, conn)\ndf.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_NUM1_SUM_1M\nFEAT_NUM1_MIN_1M\nFEAT_NUM1_MAX_1M\nFEAT_NUM1_AVG_1M\nFEAT_NUM2_SUM_1M\nFEAT_NUM2_MIN_1M\nFEAT_NUM2_MAX_1M\nFEAT_NUM2_AVG_1M\nFEAT_NUM1_SUM_2M\nFEAT_NUM1_MIN_2M\nFEAT_NUM1_MAX_2M\nFEAT_NUM1_AVG_2M\nFEAT_NUM2_SUM_2M\nFEAT_NUM2_MIN_2M\nFEAT_NUM2_MAX_2M\nFEAT_NUM2_AVG_2M\nFEAT_NUM1_SUM_3M\nFEAT_NUM1_MIN_3M\nFEAT_NUM1_MAX_3M\nFEAT_NUM1_AVG_3M\nFEAT_NUM2_SUM_3M\nFEAT_NUM2_MIN_3M\nFEAT_NUM2_MAX_3M\nFEAT_NUM2_AVG_3M\n\n\n\n\n0\n4\n2023-02-01\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n\n\n1\n5\n2023-02-01\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n\n\n2\n6\n2023-02-01\n-13.0\n-13.0\n-13.0\n-13.0\n-45.0\n-45.0\n-45.0\n-45.0\n-13.0\n-13.0\n-13.0\n-13.0\n-45.0\n-45.0\n-45.0\n-45.0\n-13.0\n-13.0\n-13.0\n-13.0\n-45.0\n-45.0\n-45.0\n-45.0\n\n\n3\n7\n2023-02-01\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\n10\n2023-02-01\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n\n\n\n\n\n\n\n\n\nCreation of categorical variables (Criação de variáveis categóricas)\n(EN) The function sqlite_create_query_cat() generates a query text for creating variables with the mode of each variable listed in feat_num_lista within the time window provided in list_window.\n(PT) A função sqlite_create_query_cat() cria um texto com a query para a criação de variáveis com a moda de cada uma das variáveis listadas em feat_num_lista na janela de tempo fornecida em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1', 'FEAT_CAT2']\nlist_window = [1, 3, 6]\n\nquery_final_cat_sqlite = sqlite_create_query_cat(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\n\ndf_cat_sqlite_sqlite = pd.read_sql(query_final_cat_sqlite, conn)\ndf_cat_sqlite_sqlite.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_CAT1_MODA_1M\nFEAT_CAT2_MODA_1M\nFEAT_CAT1_MODA_3M\nFEAT_CAT2_MODA_3M\nFEAT_CAT1_MODA_6M\nFEAT_CAT2_MODA_6M\n\n\n\n\n0\n4\n2023-02-01\nB\nA\nB\nA\nB\nA\n\n\n1\n5\n2023-02-01\nB\nB\nB\nB\nB\nB\n\n\n2\n6\n2023-02-01\nC\nB\nC\nB\nC\nB\n\n\n3\n7\n2023-02-01\nB\nC\nB\nC\nB\nC\n\n\n4\n10\n2023-02-01\nA\nA\nA\nA\nA\nA\n\n\n\n\n\n\n\n(EN) The function sqlite_create_query_cat() also allows saving a file with the created query and creating the table directly in the database. Here’s an example:\n(PT) A função sqlite_create_query_cat() também permite salvar um arquivo com a query criada e criar a tabela diretamente no banco de dados. Segue um exemplo:\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1', 'FEAT_CAT2']\nlist_window = [1, 3, 6]\nstatus = True\ntable_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery_final_cat_sqlite = sqlite_create_query_cat(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra, file_name=file_name, status=status, table_name=table_name, conn=conn)\n\nComplete query creation with table.sql saved file\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, conn)\ndf.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_CAT1_MODA_1M\nFEAT_CAT2_MODA_1M\nFEAT_CAT1_MODA_3M\nFEAT_CAT2_MODA_3M\nFEAT_CAT1_MODA_6M\nFEAT_CAT2_MODA_6M\n\n\n\n\n0\n4\n2023-02-01\nB\nA\nB\nA\nB\nA\n\n\n1\n5\n2023-02-01\nB\nB\nB\nB\nB\nB\n\n\n2\n6\n2023-02-01\nC\nB\nC\nB\nC\nB\n\n\n3\n7\n2023-02-01\nB\nC\nB\nC\nB\nC\n\n\n4\n10\n2023-02-01\nA\nA\nA\nA\nA\nA\n\n\n\n\n\n\n\n\n\nCreation of aggregated variables (Criação de variáveis agregadas)\n(EN) We can create features by aggregating on a specific value of a categorical variable and calculating sum, avg, min, and max operations for user-defined numerical variables. For example, for the variable FEAT_CAT1 having a value of A or B, we calculate sum, avg, min, and max operations for the variables FEAT_NUM1 and FEAT_NUM2. Here’s a use case:\n(PT) Podemos criar variáveis agregando por valor específico de variável categórica e calculando as operações de sum, avg, min e max para as variáveis númericas definidas pelo usuário. Por exemplo, para a variável FEAT_CAT1 tendo valor igual a A ou B, calculamos as operações de sum, avg, min e max para as variáveis FEAT_NUM1 e FEAT_NUM2. Segue um caso de uso:\n\ntb_publico = 'tb_spine'\nlist_window = [3, 6]\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlist_aggregator_value = ['A', 'B']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\n\nquery = sqlite_create_query_agregada(tb_publico, tb_feat, list_window, lista_feat_num, id, safra_ref, safra, feat_cat, list_aggregator_value)\n\nComplete query creation with no saved file.\n\n\n\ndf_sqlite_agregada = pd.read_sql(query, conn)\ndf_sqlite_agregada.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nSUM_FEAT_NUM1_FEAT_CAT1_A_3M\nMAX_FEAT_NUM1_FEAT_CAT1_A_3M\nMIN_FEAT_NUM1_FEAT_CAT1_A_3M\nAVG_FEAT_NUM1_FEAT_CAT1_A_3M\nSUM_FEAT_NUM2_FEAT_CAT1_A_3M\nMAX_FEAT_NUM2_FEAT_CAT1_A_3M\nMIN_FEAT_NUM2_FEAT_CAT1_A_3M\nAVG_FEAT_NUM2_FEAT_CAT1_A_3M\nSUM_FEAT_NUM1_FEAT_CAT1_A_6M\nMAX_FEAT_NUM1_FEAT_CAT1_A_6M\nMIN_FEAT_NUM1_FEAT_CAT1_A_6M\nAVG_FEAT_NUM1_FEAT_CAT1_A_6M\nSUM_FEAT_NUM2_FEAT_CAT1_A_6M\nMAX_FEAT_NUM2_FEAT_CAT1_A_6M\nMIN_FEAT_NUM2_FEAT_CAT1_A_6M\nAVG_FEAT_NUM2_FEAT_CAT1_A_6M\nSUM_FEAT_NUM1_FEAT_CAT1_B_3M\nMAX_FEAT_NUM1_FEAT_CAT1_B_3M\nMIN_FEAT_NUM1_FEAT_CAT1_B_3M\nAVG_FEAT_NUM1_FEAT_CAT1_B_3M\nSUM_FEAT_NUM2_FEAT_CAT1_B_3M\nMAX_FEAT_NUM2_FEAT_CAT1_B_3M\nMIN_FEAT_NUM2_FEAT_CAT1_B_3M\nAVG_FEAT_NUM2_FEAT_CAT1_B_3M\nSUM_FEAT_NUM1_FEAT_CAT1_B_6M\nMAX_FEAT_NUM1_FEAT_CAT1_B_6M\nMIN_FEAT_NUM1_FEAT_CAT1_B_6M\nAVG_FEAT_NUM1_FEAT_CAT1_B_6M\nSUM_FEAT_NUM2_FEAT_CAT1_B_6M\nMAX_FEAT_NUM2_FEAT_CAT1_B_6M\nMIN_FEAT_NUM2_FEAT_CAT1_B_6M\nAVG_FEAT_NUM2_FEAT_CAT1_B_6M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n\n\n1\n5\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\n10\n2023-02-01\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n(EN) Here’s an example of saving a file with the created query and directly creating the table in the database:\n(PT) Segue um exemplo para salvar um arquivo com a query criada e criar a tabela diretamente no banco de dados:\n\ntb_publico = 'tb_spine'\nlist_window = [3, 6]\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlist_aggregator_value = ['A', 'B']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\nstatus = True\nfile_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery = sqlite_create_query_agregada(tb_publico, tb_feat, list_window, lista_feat_num, id, safra_ref, safra, feat_cat, list_aggregator_value, file_name=file_name, status=status, table_name=table_name, conn=conn)\n\nComplete query creation with table.sql saved file\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, conn)\ndf.head()\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nSUM_FEAT_NUM1_FEAT_CAT1_A_3M\nMAX_FEAT_NUM1_FEAT_CAT1_A_3M\nMIN_FEAT_NUM1_FEAT_CAT1_A_3M\nAVG_FEAT_NUM1_FEAT_CAT1_A_3M\nSUM_FEAT_NUM2_FEAT_CAT1_A_3M\nMAX_FEAT_NUM2_FEAT_CAT1_A_3M\nMIN_FEAT_NUM2_FEAT_CAT1_A_3M\nAVG_FEAT_NUM2_FEAT_CAT1_A_3M\nSUM_FEAT_NUM1_FEAT_CAT1_A_6M\nMAX_FEAT_NUM1_FEAT_CAT1_A_6M\nMIN_FEAT_NUM1_FEAT_CAT1_A_6M\nAVG_FEAT_NUM1_FEAT_CAT1_A_6M\nSUM_FEAT_NUM2_FEAT_CAT1_A_6M\nMAX_FEAT_NUM2_FEAT_CAT1_A_6M\nMIN_FEAT_NUM2_FEAT_CAT1_A_6M\nAVG_FEAT_NUM2_FEAT_CAT1_A_6M\nSUM_FEAT_NUM1_FEAT_CAT1_B_3M\nMAX_FEAT_NUM1_FEAT_CAT1_B_3M\nMIN_FEAT_NUM1_FEAT_CAT1_B_3M\nAVG_FEAT_NUM1_FEAT_CAT1_B_3M\nSUM_FEAT_NUM2_FEAT_CAT1_B_3M\nMAX_FEAT_NUM2_FEAT_CAT1_B_3M\nMIN_FEAT_NUM2_FEAT_CAT1_B_3M\nAVG_FEAT_NUM2_FEAT_CAT1_B_3M\nSUM_FEAT_NUM1_FEAT_CAT1_B_6M\nMAX_FEAT_NUM1_FEAT_CAT1_B_6M\nMIN_FEAT_NUM1_FEAT_CAT1_B_6M\nAVG_FEAT_NUM1_FEAT_CAT1_B_6M\nSUM_FEAT_NUM2_FEAT_CAT1_B_6M\nMAX_FEAT_NUM2_FEAT_CAT1_B_6M\nMIN_FEAT_NUM2_FEAT_CAT1_B_6M\nAVG_FEAT_NUM2_FEAT_CAT1_B_6M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n74.0\n74.0\n74.0\n74.0\n52.0\n52.0\n52.0\n52.0\n\n\n1\n5\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n79.0\n79.0\n79.0\n79.0\n77.0\n77.0\n77.0\n77.0\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n-44.0\n-44.0\n-44.0\n-44.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\n10\n2023-02-01\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\n11.0\n11.0\n11.0\n11.0\n-39.0\n-39.0\n-39.0\n-39.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN",
    "crumbs": [
      "featsql"
    ]
  },
  {
    "objectID": "index.html#mysql",
    "href": "index.html#mysql",
    "title": "featsql",
    "section": "2. MySQL",
    "text": "2. MySQL\n\nSetting up the connection (Configurando a conexão)\n\nhost = \"localhost\"\nuser = \"sqluser\"\npassword = \"password\"\ndatabase = \"mydatabase\"\n\n# Conectar ao MySQL\nconnection = mysql.connector.connect(\n    host=host,\n    user=user,\n    password=password,\n    database=database\n)\n\n\n\nInitial view of the public (Visão inicial do público)\n(EN) First, let’s observe the format of the spine table.\n(PT) Primeiro vamos observar o formato da tabela spine\n\ndf_spine = pd.read_sql(\"SELECT * FROM tb_spine\", connection)\ndf_spine.head()\n\n/tmp/ipykernel_31659/1385309256.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_spine = pd.read_sql(\"SELECT * FROM tb_spine\", connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nTarget\n\n\n\n\n0\n4\n2023-02-01\n1\n\n\n1\n5\n2023-02-01\n0\n\n\n2\n6\n2023-02-01\n0\n\n\n3\n7\n2023-02-01\n0\n\n\n4\n10\n2023-02-01\n0\n\n\n\n\n\n\n\n\n\nInitial view of the variables table (Visão inicial da tabela de variáveis)\n(EN) The table tb_feat contains 4 variables, two numeric and two categorical. Note that there are more unique IDs and dates available in this than in the spine table, as is often the case.\n(PT) A tabela tb_feat contém 4 variáveis, duas sendo numéricas e duas categórica. Perceba que existem mais ID’s únicos e datas disponíveis nessa tabela do que na tabela spine, caso que ocorre no dia a dia.\n\ndf_data = pd.read_sql(\"SELECT * FROM tb_feat\", connection)\ndf_data.head()\n\n/tmp/ipykernel_31659/548342132.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_data = pd.read_sql(\"SELECT * FROM tb_feat\", connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA\nFEAT_NUM1\nFEAT_NUM2\nFEAT_CAT1\nFEAT_CAT2\n\n\n\n\n0\n1\n2023-01-01\n73\n23\nB\nB\n\n\n1\n3\n2023-01-01\n15\n1\nB\nB\n\n\n2\n5\n2023-01-01\n75\n71\nA\nA\n\n\n3\n7\n2023-01-01\n73\n82\nB\nC\n\n\n4\n9\n2023-01-01\n61\n8\nC\nB\n\n\n\n\n\n\n\n\n\nCreation of numerical variables (Criação de variáveis numéricas)\n(EN) The function mysql_create_query_num() creates a query text for generating variables with the sum, minimum, maximum, and average operations on the variables listed in feat_num_lista and within the time window listed in list_window.\n(PT) A função mysql_create_query_num() cria um texto com a query para a criação de variáveis com as operações soma, mínimo, máximo e média das variáveis listadas em feat_num_lista e com a janela de tempo listada em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nquery_final_num_mysql = mysql_create_query_num(tb_publico, tb_feat, list_window,feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\n\ndf_num_mysql = pd.read_sql(query_final_num_mysql, connection)\ndf_num_mysql.head()\n\n/tmp/ipykernel_31659/3114881597.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_num_mysql = pd.read_sql(query_final_num_mysql, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_NUM1_SUM_1M\nFEAT_NUM1_MIN_1M\nFEAT_NUM1_MAX_1M\nFEAT_NUM1_AVG_1M\nFEAT_NUM2_SUM_1M\nFEAT_NUM2_MIN_1M\nFEAT_NUM2_MAX_1M\nFEAT_NUM2_AVG_1M\nFEAT_NUM1_SUM_2M\nFEAT_NUM1_MIN_2M\nFEAT_NUM1_MAX_2M\nFEAT_NUM1_AVG_2M\nFEAT_NUM2_SUM_2M\nFEAT_NUM2_MIN_2M\nFEAT_NUM2_MAX_2M\nFEAT_NUM2_AVG_2M\nFEAT_NUM1_SUM_3M\nFEAT_NUM1_MIN_3M\nFEAT_NUM1_MAX_3M\nFEAT_NUM1_AVG_3M\nFEAT_NUM2_SUM_3M\nFEAT_NUM2_MIN_3M\nFEAT_NUM2_MAX_3M\nFEAT_NUM2_AVG_3M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n5\n2023-02-01\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n\n\n4\n10\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n(EN) We can use the file_name parameter with a name in the format ‘table.sql’ to save the creation query in a file in the same folder where it is executed.\n(PT) Podemos utilizar o parâmetro file_name com um nome no formato “table.sql” para salvar query de criação em um arquivo na mesma pasta que é executado.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nstatus = True\ntable_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery_final_num_mysql = mysql_create_query_num(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra, file_name=file_name, status=status, table_name=table_name, conn=connection)\n\nProgrammingError: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ']\n-- Create table with the name nome_da_tabela_criada\n-- Criar a tabela nome_da_' at line 1\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, connection)\ndf.head()\n\n/tmp/ipykernel_1661/3805114983.py:4: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_NUM1_SUM_1M\nFEAT_NUM1_MIN_1M\nFEAT_NUM1_MAX_1M\nFEAT_NUM1_AVG_1M\nFEAT_NUM2_SUM_1M\nFEAT_NUM2_MIN_1M\nFEAT_NUM2_MAX_1M\nFEAT_NUM2_AVG_1M\nFEAT_NUM1_SUM_2M\nFEAT_NUM1_MIN_2M\nFEAT_NUM1_MAX_2M\nFEAT_NUM1_AVG_2M\nFEAT_NUM2_SUM_2M\nFEAT_NUM2_MIN_2M\nFEAT_NUM2_MAX_2M\nFEAT_NUM2_AVG_2M\nFEAT_NUM1_SUM_3M\nFEAT_NUM1_MIN_3M\nFEAT_NUM1_MAX_3M\nFEAT_NUM1_AVG_3M\nFEAT_NUM2_SUM_3M\nFEAT_NUM2_MIN_3M\nFEAT_NUM2_MAX_3M\nFEAT_NUM2_AVG_3M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n5\n2023-02-01\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n\n\n4\n10\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nCreation of categorical variables (Criação de variáveis categóricas)\n(EN) The function mysql_create_query_cat() generates a query text for creating variables with the mode of each variable listed in feat_num_lista within the time window provided in list_window.\n(PT) A função mysql_create_query_cat() cria um texto com a query para a criação de variáveis com a moda de cada uma das variáveis listadas em feat_num_lista na janela de tempo fornecida em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1','FEAT_CAT2']\nlist_window = [1,2,3]\nquery_final_cat_mysql = mysql_create_query_cat(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\n\ndf_cat_sqlite_mysql = pd.read_sql(query_final_cat_mysql, connection)\ndf_cat_sqlite_mysql.head()\n\n/tmp/ipykernel_1661/827211967.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_cat_sqlite_mysql = pd.read_sql(query_final_cat_mysql, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_CAT1_MODA_1M\nFEAT_CAT2_MODA_1M\nFEAT_CAT1_MODA_2M\nFEAT_CAT2_MODA_2M\nFEAT_CAT1_MODA_3M\nFEAT_CAT2_MODA_3M\n\n\n\n\n0\n4\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\n5\n2023-02-01\nA\nA\nA\nA\nA\nA\n\n\n2\n6\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n3\n7\n2023-02-01\nB\nC\nB\nC\nB\nC\n\n\n4\n10\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\n\n\n\n\n(EN) The function sqlite_create_query_cat() also allows saving a file with the created query and creating the table directly in the database. Here’s an example:\n(PT) A função sqlite_create_query_cat() também permite salvar um arquivo com a query criada e criar a tabela diretamente no banco de dados. Segue um exemplo:\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1', 'FEAT_CAT2']\nlist_window = [1, 3, 6]\nstatus = True\ntable_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery_final_cat_mysql = mysql_create_query_cat(tb_publico, tb_feat, list_window,feat_num_lista, id, safra_ref, safra, file_name=file_name, status=status, table_name=table_name, conn=connection)\n\nComplete query creation with table.sql saved file\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, connection)\ndf.head()\n\n/tmp/ipykernel_1661/3805114983.py:4: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nFEAT_CAT1_MODA_1M\nFEAT_CAT2_MODA_1M\nFEAT_CAT1_MODA_3M\nFEAT_CAT2_MODA_3M\nFEAT_CAT1_MODA_6M\nFEAT_CAT2_MODA_6M\n\n\n\n\n0\n4\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\n5\n2023-02-01\nA\nA\nA\nA\nA\nA\n\n\n2\n6\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n3\n7\n2023-02-01\nB\nC\nB\nC\nB\nC\n\n\n4\n10\n2023-02-01\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\n\n\n\n\n\n\nCreation of aggregated variables (Criação de variáveis agregadas)\n(EN) We can create features by aggregating on a specific value of a categorical variable and calculating sum, avg, min, and max operations for user-defined numerical variables. For example, for the variable FEAT_CAT1 having a value of A or B, we calculate sum, avg, min, and max operations for the variables FEAT_NUM1 and FEAT_NUM2. Here’s a use case:\n(PT) Podemos criar variáveis agregando por valor específico de variável categórica e calculando as operações de sum, avg, min e max para as variáveis númericas definidas pelo usuário. Por exemplo, para a variável FEAT_CAT1 tendo valor igual a A ou B, calculamos as operações de sum, avg, min e max para as variáveis FEAT_NUM1 e FEAT_NUM2. Segue um caso de uso:\n\ntb_publico = 'tb_spine'\nlist_window = [3, 6]\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlista_valor_agragador = ['A', 'B']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\n\nquery = mysql_create_query_agregada(tb_publico, tb_feat, list_window, lista_feat_num, id, safra_ref, safra, feat_cat, lista_valor_agragador)\n\nComplete query creation with no saved file.\n\n\n\ndf_mysql_agregada = pd.read_sql(query, connection)\ndf_mysql_agregada.head()\n\n/tmp/ipykernel_1661/789764728.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_mysql_agregada = pd.read_sql(query, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nSUM_FEAT_NUM1_FEAT_CAT1_A_3M\nMAX_FEAT_NUM1_FEAT_CAT1_A_3M\nMIN_FEAT_NUM1_FEAT_CAT1_A_3M\nAVG_FEAT_NUM1_FEAT_CAT1_A_3M\nSUM_FEAT_NUM2_FEAT_CAT1_A_3M\nMAX_FEAT_NUM2_FEAT_CAT1_A_3M\nMIN_FEAT_NUM2_FEAT_CAT1_A_3M\nAVG_FEAT_NUM2_FEAT_CAT1_A_3M\nSUM_FEAT_NUM1_FEAT_CAT1_A_6M\nMAX_FEAT_NUM1_FEAT_CAT1_A_6M\nMIN_FEAT_NUM1_FEAT_CAT1_A_6M\nAVG_FEAT_NUM1_FEAT_CAT1_A_6M\nSUM_FEAT_NUM2_FEAT_CAT1_A_6M\nMAX_FEAT_NUM2_FEAT_CAT1_A_6M\nMIN_FEAT_NUM2_FEAT_CAT1_A_6M\nAVG_FEAT_NUM2_FEAT_CAT1_A_6M\nSUM_FEAT_NUM1_FEAT_CAT1_B_3M\nMAX_FEAT_NUM1_FEAT_CAT1_B_3M\nMIN_FEAT_NUM1_FEAT_CAT1_B_3M\nAVG_FEAT_NUM1_FEAT_CAT1_B_3M\nSUM_FEAT_NUM2_FEAT_CAT1_B_3M\nMAX_FEAT_NUM2_FEAT_CAT1_B_3M\nMIN_FEAT_NUM2_FEAT_CAT1_B_3M\nAVG_FEAT_NUM2_FEAT_CAT1_B_3M\nSUM_FEAT_NUM1_FEAT_CAT1_B_6M\nMAX_FEAT_NUM1_FEAT_CAT1_B_6M\nMIN_FEAT_NUM1_FEAT_CAT1_B_6M\nAVG_FEAT_NUM1_FEAT_CAT1_B_6M\nSUM_FEAT_NUM2_FEAT_CAT1_B_6M\nMAX_FEAT_NUM2_FEAT_CAT1_B_6M\nMIN_FEAT_NUM2_FEAT_CAT1_B_6M\nAVG_FEAT_NUM2_FEAT_CAT1_B_6M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n5\n2023-02-01\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n\n\n4\n10\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\ntb_publico = 'tb_spine'\nlist_window = [3, 6]\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT2'\nlista_valor_agragador = ['B', 'C']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\n\nquery = mysql_create_query_agregada(tb_publico, tb_feat, list_window, lista_feat_num, id, safra_ref, safra, feat_cat, lista_valor_agragador)\n\nComplete query creation with no saved file.\n\n\n\ndf_mysql_agregada = pd.read_sql(query, connection)\ndf_mysql_agregada.head()\n\n/tmp/ipykernel_1661/789764728.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df_mysql_agregada = pd.read_sql(query, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nSUM_FEAT_NUM1_FEAT_CAT2_B_3M\nMAX_FEAT_NUM1_FEAT_CAT2_B_3M\nMIN_FEAT_NUM1_FEAT_CAT2_B_3M\nAVG_FEAT_NUM1_FEAT_CAT2_B_3M\nSUM_FEAT_NUM2_FEAT_CAT2_B_3M\nMAX_FEAT_NUM2_FEAT_CAT2_B_3M\nMIN_FEAT_NUM2_FEAT_CAT2_B_3M\nAVG_FEAT_NUM2_FEAT_CAT2_B_3M\nSUM_FEAT_NUM1_FEAT_CAT2_B_6M\nMAX_FEAT_NUM1_FEAT_CAT2_B_6M\nMIN_FEAT_NUM1_FEAT_CAT2_B_6M\nAVG_FEAT_NUM1_FEAT_CAT2_B_6M\nSUM_FEAT_NUM2_FEAT_CAT2_B_6M\nMAX_FEAT_NUM2_FEAT_CAT2_B_6M\nMIN_FEAT_NUM2_FEAT_CAT2_B_6M\nAVG_FEAT_NUM2_FEAT_CAT2_B_6M\nSUM_FEAT_NUM1_FEAT_CAT2_C_3M\nMAX_FEAT_NUM1_FEAT_CAT2_C_3M\nMIN_FEAT_NUM1_FEAT_CAT2_C_3M\nAVG_FEAT_NUM1_FEAT_CAT2_C_3M\nSUM_FEAT_NUM2_FEAT_CAT2_C_3M\nMAX_FEAT_NUM2_FEAT_CAT2_C_3M\nMIN_FEAT_NUM2_FEAT_CAT2_C_3M\nAVG_FEAT_NUM2_FEAT_CAT2_C_3M\nSUM_FEAT_NUM1_FEAT_CAT2_C_6M\nMAX_FEAT_NUM1_FEAT_CAT2_C_6M\nMIN_FEAT_NUM1_FEAT_CAT2_C_6M\nAVG_FEAT_NUM1_FEAT_CAT2_C_6M\nSUM_FEAT_NUM2_FEAT_CAT2_C_6M\nMAX_FEAT_NUM2_FEAT_CAT2_C_6M\nMIN_FEAT_NUM2_FEAT_CAT2_C_6M\nAVG_FEAT_NUM2_FEAT_CAT2_C_6M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n5\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n\n\n4\n10\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n(EN) Here’s an example of saving a file with the created query and directly creating the table in the database:\n(PT) Segue um exemplo para salvar um arquivo com a query criada e criar a tabela diretamente no banco de dados:\n\ntb_publico = 'tb_spine'\nlist_window = [3, 6]\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlista_valor_agragador = ['A', 'B']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\nstatus = True\ntable_name = 'nome_da_tabela_criada'\nfile_name = 'table.sql'\n\nquery = mysql_create_query_agregada(tb_publico, tb_feat, list_window, lista_feat_num, id, safra_ref, safra, feat_cat, lista_valor_agragador, file_name=file_name, status=status, table_name=table_name, conn=connection)\n\nComplete query creation with table.sql saved file\n\n\n(EN) To verify the creation, let’s check the database table using the name of the created table:\n(PT) Para conferir a criação, vamos consultar o banco de dados com o nome da tabela que foi criada:\n\nquery=f\"\"\"SELECT  * from {table_name}\"\"\"\ndf = pd.read_sql(query, connection)\ndf.head()\n\n/tmp/ipykernel_1661/3805114983.py:4: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, connection)\n\n\n\n\n\n\n\n\n\nID\nSAFRA_REF\nSUM_FEAT_NUM1_FEAT_CAT1_A_3M\nMAX_FEAT_NUM1_FEAT_CAT1_A_3M\nMIN_FEAT_NUM1_FEAT_CAT1_A_3M\nAVG_FEAT_NUM1_FEAT_CAT1_A_3M\nSUM_FEAT_NUM2_FEAT_CAT1_A_3M\nMAX_FEAT_NUM2_FEAT_CAT1_A_3M\nMIN_FEAT_NUM2_FEAT_CAT1_A_3M\nAVG_FEAT_NUM2_FEAT_CAT1_A_3M\nSUM_FEAT_NUM1_FEAT_CAT1_A_6M\nMAX_FEAT_NUM1_FEAT_CAT1_A_6M\nMIN_FEAT_NUM1_FEAT_CAT1_A_6M\nAVG_FEAT_NUM1_FEAT_CAT1_A_6M\nSUM_FEAT_NUM2_FEAT_CAT1_A_6M\nMAX_FEAT_NUM2_FEAT_CAT1_A_6M\nMIN_FEAT_NUM2_FEAT_CAT1_A_6M\nAVG_FEAT_NUM2_FEAT_CAT1_A_6M\nSUM_FEAT_NUM1_FEAT_CAT1_B_3M\nMAX_FEAT_NUM1_FEAT_CAT1_B_3M\nMIN_FEAT_NUM1_FEAT_CAT1_B_3M\nAVG_FEAT_NUM1_FEAT_CAT1_B_3M\nSUM_FEAT_NUM2_FEAT_CAT1_B_3M\nMAX_FEAT_NUM2_FEAT_CAT1_B_3M\nMIN_FEAT_NUM2_FEAT_CAT1_B_3M\nAVG_FEAT_NUM2_FEAT_CAT1_B_3M\nSUM_FEAT_NUM1_FEAT_CAT1_B_6M\nMAX_FEAT_NUM1_FEAT_CAT1_B_6M\nMIN_FEAT_NUM1_FEAT_CAT1_B_6M\nAVG_FEAT_NUM1_FEAT_CAT1_B_6M\nSUM_FEAT_NUM2_FEAT_CAT1_B_6M\nMAX_FEAT_NUM2_FEAT_CAT1_B_6M\nMIN_FEAT_NUM2_FEAT_CAT1_B_6M\nAVG_FEAT_NUM2_FEAT_CAT1_B_6M\n\n\n\n\n0\n4\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n5\n2023-02-01\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\n75.0\n75.0\n75.0\n75.0\n71.0\n71.0\n71.0\n71.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n6\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n7\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n73.0\n73.0\n73.0\n73.0\n82.0\n82.0\n82.0\n82.0\n\n\n4\n10\n2023-02-01\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN",
    "crumbs": [
      "featsql"
    ]
  },
  {
    "objectID": "index.html#snowflake",
    "href": "index.html#snowflake",
    "title": "featsql",
    "section": "3. Snowflake",
    "text": "3. Snowflake\n\nCriação de variáveis numéricas\n(EN) The function snow_create_query_num() creates a query text for generating variables with the sum, minimum, maximum, and average operations on the variables listed in feat_num_lista and within the time window listed in list_window.\n(PT) A função snow_create_query_num() cria um texto com a query para a criação de variáveis com as operações soma, mínimo, máximo e média das variáveis listadas em feat_num_lista e com a janela de tempo listada em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\n\nquery_final_num_snow = snow_create_query_num(tb_publico, tb_feat, list_window,feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\nPodemos salvar a consulta da query em um arquivo também:\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_NUM1','FEAT_NUM2']\nlist_window = [1,2,3]\nfile_name = 'table.sql'\n\nquery_final_num_snow = snow_create_query_num(tb_publico, tb_feat, list_window,feat_num_lista, id, safra_ref, safra, file_name)\n\nComplete query creation with table.sql saved file\n\n\n\n\nCriação de variáveis categóricas\n(EN) The function mysql_create_query_cat() generates a query text for creating variables with the mode of each variable listed in feat_num_lista within the time window provided in list_window.\n(PT) A função mysql_create_query_cat() cria um texto com a query para a criação de variáveis com a moda de cada uma das variáveis listadas em feat_num_lista na janela de tempo fornecida em list_window.\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1','FEAT_CAT2']\nlist_window = [1,2,3]\n\nquery_final_cat_snow = snow_create_query_cat(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra)\n\nComplete query creation with no saved file.\n\n\n\ntb_publico = 'tb_spine'\ntb_feat = 'tb_feat'\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\nsafra = 'SAFRA'\nfeat_num_lista = ['FEAT_CAT1','FEAT_CAT2']\nlist_window = [1,2,3]\nfile_name = 'table.sql'\n\nquery_final_cat_snow = snow_create_query_cat(tb_publico, tb_feat, list_window, feat_num_lista, id, safra_ref, safra, file_name)\n\nComplete query creation with table.sql saved file\n\n\n\n\nCriação de variáveis agregadas\n(EN) We can create features by aggregating on a specific value of a categorical variable and calculating sum, avg, min, and max operations for user-defined numerical variables. For example, for the variable FEAT_CAT1 having a value of A or B, we calculate sum, avg, min, and max operations for the variables FEAT_NUM1 and FEAT_NUM2. Here’s a use case:\n(PT) Podemos criar variáveis agregando por valor específico de variável categórica e calculando as operações de sum, avg, min e max para as variáveis númericas definidas pelo usuário. Por exemplo, para a variável FEAT_CAT1 tendo valor igual a A ou B, calculamos as operações de sum, avg, min e max para as variáveis FEAT_NUM1 e FEAT_NUM2. Segue um caso de uso:\n\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlista_valor_agragador = ['B', 'C']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\njanelas = [1, 2, 3]\ntb_publico = 'tb_spine'\n\n\nquery_final_cat_agre_snow = snow_create_query_agregada(tb_publico, tb_feat, janelas,  lista_feat_num, id, safra_ref, safra, feat_cat, lista_valor_agragador)\n\nComplete query creation with no saved file.\n\n\n(EN) We can also save the query to a file:\n(PT) Podemos também salvar a consulta em um arquivo:\n\nlista_feat_num = ['FEAT_NUM1', 'FEAT_NUM2']\nfeat_cat = 'FEAT_CAT1'\nlista_valor_agragador = ['B', 'C']\nid = 'ID'\nsafra_ref = 'SAFRA_REF'\ntb_feat = 'tb_feat'\nsafra = 'SAFRA'\njanelas = [1, 2, 3]\ntb_publico = 'tb_spine'\nfile_name = 'table.sql'\n\nquery_final_cat_agre_snow = snow_create_query_agregada(tb_publico, tb_feat, janelas,  lista_feat_num, id, safra_ref, safra, feat_cat, lista_valor_agragador, file_name)\n\nComplete query creation with table.sql saved file",
    "crumbs": [
      "featsql"
    ]
  }
]